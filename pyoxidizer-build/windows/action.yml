name: "pyoxidizer-build-windows"
description: "Build exe + msi-installer with pyoxidizer on windows. Code has to be checked out."

inputs:
  app-name:
    description: "The name of the app. This name can later be used in the command line to call the app"
    required: true

  run-command:
    description: "The command to run at the start of the app. (eg. \"from package/main import main; main()\""
    required: true

  display-name:
    description: "The name, which appears in the name of the msi-installer and in the program files folder "
    required: true

  app-author:
    description: "The name of the author or the manufacturer, which is displayed when installing the app"
    required: true

  app-architecture:
    description: "Defines the architecture of the windows exe. Possible inputs: [x32, x64]"
    required: true
    default: "None"

  artifact-name:
    description: "Name of the artifact, where the built file should be uploaded"
    required: true

  use-own-pyoxidizer-config:
    description: "Use own pyoxidizer.bzl, given in the project folder if true, otherwise use standard config provided by this action"
    required: false
    default: 'false'


runs:
  using: "composite"
  steps: 

    - if: inputs.app-architecture == 'None'
      run: |
        echo The app-architecture must be set accordingly 
        exit 1
      shell: pwsh

    - name: Install pyoxidizer
      run: pip install pyoxidizer
      shell: pwsh

    - id: setup-poetry
      uses: henningwoehr/actions/setup-poetry@main

    - name: Generate requirements.txt
      run: poetry export --without-hashes > requirements.txt
      shell: pwsh
  
    - if: inputs.use-own-pyoxidizer-config == 'false'
      name: Get pyoxidizer build file
      run: curl https://raw.githubusercontent.com/henningWoehr/actions/main/pyoxidizer-build/pyoxidizer.bzl > pyoxidizer.bzl
      shell: pwsh

    # Windows x32
    - if: inputs.use-own-pyoxidizer-config == 'false' && inputs.app-architecture == 'x32'
      name: Build executable with pyoxidizer
      run: pyoxidizer build exe msi_installer --target-triple i686-pc-windows-msvc --release --var app_name ${{ inputs.app-name }} --var run_command "${{ inputs.run-command }}" --var display_name "${{ inputs.display-name }}" --var app_version ${{ steps.setup-poetry.outputs.project-version }} --var app_author "${{ inputs.app-author }}"
      shell: pwsh

    - if: inputs.use-own-pyoxidizer-config == 'true' && inputs.app-architecture == 'x32'
      name: Build executable with pyoxidizer
      run: pyoxidizer build exe msi_installer --target-triple i686-pc-windows-msvc --release
      shell: pwsh

    # Windows x64
    - if: inputs.use-own-pyoxidizer-config == 'false' && inputs.app-architecture == 'x64'
      name: Build executable with pyoxidizer
      run: pyoxidizer build exe msi_installer --target-triple x86_64-pc-windows-msvc --release --var app_name ${{ inputs.app-name }} --var run_command "${{ inputs.run-command }}" --var display_name "${{ inputs.display-name }}" --var app_version ${{ steps.setup-poetry.outputs.project-version }} --var app_author "${{ inputs.app-author }}"
      shell: pwsh

    - if: inputs.use-own-pyoxidizer-config == 'true' && inputs.app-architecture == 'x64'
      name: Build executable with pyoxidizer
      run: pyoxidizer build exe msi_installer --target-triple x86_64-pc-windows-msvc --release
      shell: pwsh

    - run: mkdir built_file
      shell: pwsh

    - run: Compress-Archive build/*/release/msi_installer/*.msi -d built_file/windows_${{ inputs.app-architecture }}_msi-installer.zip
      shell: pwsh

    - run: Compress-Archive build/*/release/msi_installer/staged_files/*.exe -d built_file/windows_${{ inputs.app-architecture }}_exe.zip
      shell: pwsh

    - name: Upload built file
      uses: actions/upload-artifact@v2
      with:
        name: ${{ inputs.artifact-name }}
        path: built_file/