name: "pyoxidizer-build"
description: "Build project with pyoxidizer on linux gnu x64. Code has to be checked out."

inputs:
  target-system:
    description: "Select one of the following system to build on: [linux_gnu_x64, windows_x32, windows_x64, macos_x64]"
    required: true

  app-name:
    description: "The name of the app. This name can later be used in the command line to call the app"
    required: true

  run-command:
    description: "The command to run at the start of the app. (eg. \"from package/main import main; main()\""
    required: true

  display-name:
    description: "The name, which appears in the name of the msi-installer and in the program files folder "
    required: true

  app-author:
    description: "The name of the author or the manufacturer, which is displayed when installing the app"
    required: true

  app-architecture:
    description: "Defines the architecture of the windows exe. Possible inputs: [x32, x64]"
    required: true
    default: "None"

  artifact-name:
    description: "Name of the artifact, where the built file should be uploaded"
    required: true

  use-own-pyoxidizer-config:
    description: "Use own pyoxidizer.bzl, given in the project folder if true, otherwise use standard config provided by this action"
    required: false
    default: 'false'


runs:
  using: "composite"
  steps:  

    # working
    # - name: Install pyoxidizer
    #   run: pip install pyoxidizer
    #   shell: pwsh

    # # working
    # - name: Setup poetry
    #   id: setup-poetry
    #   uses: henningwoehr/actions/setup-poetry@main

    # # working
    # - name: Generate requirements.txt
    #   run: poetry export --without-hashes > requirements.txt
    #   shell: pwsh

    # # working
    # - if: inputs.use-own-pyoxidizer-config == 'false'
    #   name: Get pyoxidizer build file
    #   run: curl https://raw.githubusercontent.com/henningWoehr/actions/main/pyoxidizer-build/pyoxidizer.bzl > pyoxidizer.bzl
    #   shell: pwsh

    - name: Set build variables
      id: build-variables
      if: inputs.use-own-pyoxidizer-config == 'false'
      run: | 
        $MY_STRING='--var app_name ${{ inputs.app-name }} --var run_command "${{ inputs.run-command }}" --var display_name "${{ inputs.display-name }}" --var app_version ${{ steps.setup-poetry.outputs.project-version }} --var app_author "${{ inputs.app-author }}"'
        echo "::set-output name=vars::$MY_STRING"
      shell: pwsh

      # $MY_STRING="--var app_name ${{ inputs.app-name }} --var run_command '${{ inputs.run-command }}' --var display_name '${{ inputs.display-name }}' --var app_version ${{ steps.setup-poetry.outputs.project-version }} --var app_author '${{ inputs.app-author }}'"

    - name: Test output variable
      run: echo "${{ steps.build-variables.outputs.vars }}"
      shell: pwsh

    # needs variable input (exe or msi_installer) and (target-triple); maybe combine with the following step
    # - if: inputs.use-own-pyoxidizer-config == 'false'
    # - name: Build executable with pyoxidizer ${{ steps.build-variables.outputs.vars }}
    #   run: pyoxidizer build exe --release 
    #   shell: pwsh

    # # - if: inputs.use-own-pyoxidizer-config == 'true'
    # #   name: Build executable with pyoxidizer
    # #   run: pyoxidizer build exe --release
    # #   shell: pwsh

    # # working
    # - run: mkdir built_file
    #   shell: pwsh

    # # working
    # - if: inputs.target-system == 'linux_gnu_x64'
    #   run: strip ./build/*/release/exe/${{ inputs.app-name }}
    #   shell: pwsh

    # - name: zip executable
    #   run: zip -j built_file/linux_gnu_x64_exe.zip ./build/x86_64-unknown-linux-gnu/release/exe/*
    #   shell: pwsh

    # - run: Compress-Archive build/*/release/exe/${{ inputs.app-name }} -d built_file/linux_gnu_x64_exe.zip
    #   shell: pwsh

    # # working
    # - name: Upload built file
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: ${{ inputs.artifact-name }}
    #     path: built_file/