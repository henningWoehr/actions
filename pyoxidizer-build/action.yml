name: "pyoxidizer-build"
description: "Build project with pyoxidizer on linux gnu x64. Code has to be checked out."

inputs:
  target-system:
    description: "Select one of the following system to build on: [linux_gnu_x64, windows_x32, windows_x64, macos_x64]"
    required: true

  app-name:
    description: "The name of the app. This name can later be used in the command line to call the app"
    required: true

  run-command:
    description: "The command to run at the start of the app. (eg. \"from package/main import main; main()\""
    required: true

  display-name:
    description: "The name, which appears in the name of the msi-installer and in the program files folder "
    required: true

  app-author:
    description: "The name of the author or the manufacturer, which is displayed when installing the app"
    required: true

  app-architecture:
    description: "Defines the architecture of the windows exe. Possible inputs: [x32, x64]"
    required: true
    default: "None"

  artifact-name:
    description: "Name of the artifact, where the built file should be uploaded"
    required: true

  use-own-pyoxidizer-config:
    description: "Use own pyoxidizer.bzl, given in the project folder if true, otherwise use standard config provided by this action"
    required: false
    default: 'false'


runs:
  using: "composite"
  steps:  

    # working
    - name: Install pyoxidizer
      run: pip install pyoxidizer
      shell: pwsh

    # working
    - name: Setup poetry
      id: setup-poetry
      uses: henningwoehr/actions/poetry/setup@main

    # working
    - name: Generate requirements.txt
      run: poetry export --without-hashes > requirements.txt
      shell: pwsh

    # working
    - if: inputs.use-own-pyoxidizer-config == 'false'
      name: Get pyoxidizer build file
      run: curl https://raw.githubusercontent.com/henningWoehr/actions/main/pyoxidizer-build/pyoxidizer.bzl > pyoxidizer.bzl
      shell: pwsh

    - name: Set build variables
      id: build-variables
      # if: inputs.use-own-pyoxidizer-config == 'false'
      run: | 
        if ('${{inputs.use-own-pyoxidizer-config}}' -eq 'false')
        {
          $OUTPUT = "--var app_name ${{ inputs.app-name }} --var run_command '${{ inputs.run-command }}' --var display_name '${{ inputs.display-name }}' --var app_version ${{ steps.setup-poetry.outputs.project-version }} --var app_author '${{ inputs.app-author }}'"
        }
        else
        {
          $OUTPUT = ""
        }
        echo "::set-output name=vars::$OUTPUT"
      shell: pwsh

    - name: Set build target linux (exe)
      id: build-target
      run: |
        switch ('${{ inputs.target-system }}')
        {
            'linux_gnu_x64'
            {
                $OUTPUT = "exe"
            }
            'windows_x32'
            {
                $OUTPUT = "msi_installer"
            }
            'windows_x64'
            {
                $OUTPUT = "msi_installer"
            }
        }
        echo "::set-output name=target::$OUTPUT"
      shell: pwsh

    - name: Set target-triple (linux_gnu_x64)
      id: target-triple
      run: |
        switch ('${{ inputs.target-system }}')
        {
            'linux_gnu_x64'
            {
                $OUTPUT = "x86_64-unknown-linux-gnu"
            }
            'windows_x32'
            {
                $OUTPUT = "i686-pc-windows-msvc"
            }
            'windows_x64'
            {
                $OUTPUT = "x86_64-pc-windows-msvc"
            }
        }
        echo "::set-output name=target::$OUTPUT"
      shell: pwsh

    # needs variable input (exe or msi_installer) and (target-triple); maybe combine with the following step
    - name: Build executable with pyoxidizer
      run: pyoxidizer build ${{ steps.build-target.outputs.target }} --target-triple ${{ steps.target-triple.outputs.target }} --release ${{ steps.build-variables.outputs.vars }}
      shell: pwsh

    # working
    - run: mkdir built_file
      shell: pwsh

    # # working
    # - if: inputs.target-system == 'linux_gnu_x64'
    #   run: strip ./build/*/release/exe/${{ inputs.app-name }}
    #   shell: pwsh

    - if: inputs.target-system == 'linux_gnu_x64'
      run: |
        strip ./build/*/release/exe/${{ inputs.app-name }}
        Compress-Archive build/*/release/exe/${{ inputs.app-name }} -d built_file/linux_gnu_x64_exe.zip
      shell: pwsh

    - if: inputs.target-system == 'windows_x32' || inputs.target-system == 'windows_x64'
      run: |
        Compress-Archive build/*/release/msi_installer/*.msi -d built_file/${{ inputs.target-system }}_msi-installer.zip
        Compress-Archive build/*/release/msi_installer/staged_files/*.exe -d built_file/${{ inputs.target-system }}_exe.zip
      shell: pwsh

    # working
    - name: Upload built file
      uses: actions/upload-artifact@v2
      with:
        name: ${{ inputs.artifact-name }}
        path: built_file/